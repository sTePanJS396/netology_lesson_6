Евгений, здравствуйте!
В этом файле я хочу дать пояснения к своему коду, а также рассказать что исправил и улучшил.

I -- "[Clock] Вот тут не очень хорошо, что дочерний компонент знает про родительский стейт 
https://github.com/sTePanJS396/netology_lesson_6/blob/f7b2503e58f25d5decdeac772325b49a975824ee/task_number_one/src/components/AddBlock.js#L13" =>
    в props "onAdd" я передаю главный state, в котором лежит список/массив со всеми действующими часами. Далее я при событии "submit" создаю
    новый объект со временем. Перенести этот state в AddBlock я не могу - в App.js рендерятся часы из state, вот кстати, этот код:
    `{clocks.map(el => <Clock key={el.id} deviation={el.deviation} city={el.city} id={el.id} onRemove={remove}/>)}`. Можно, конечно, завести отдельный
    state в AddBlock, а после передавать его каким-либо образом на верх к родителю, но это лишний код (к тому же повысится сложность дебага, если
    это в дальнейшем потребуется). К сожалению, способа как написать красивее и так, чтобы дочерний элемент не знал про state родителя, но при этом
    мог с ним взаимодействовать, я не знаю, но готов послушать Ваше мнение и пример, как это можно реализовать.

II -- "[Clock] Зачем-то вы используете деструктуризацию всех свойств стейта, и потом затираете новыми данными. 
Во-первых в классовых компонентах стейт можно обновлять по отдельности, то есть не все свойства передавать, а часть и при этом React обновит только эти свойства и не затрет другие. 
Во-вторых, вы в начале правильно обращаетесь к предыдущему стейту, но потом уже не правильно через this.state (https://inlnk.ru/n0PL5n)" =>
    1. Да, действительно, не знаю почему, но перезаписываю предыдущие значения state, при этом перетирая их новыми значениями. Исправленно.
    2. Вы правы, необходимо использовать "prev". Исправленно.

III -- "[Clock] Еще почему-то в конструкторе вы инициализируете стейт с пустыми данными https://inlnk.ru/dnxZvV, но уже после понтирования компонента 
создаете интервал с обновлением стейта с данными. Особенно заметно это на свойстве deviation – В конструкторе он 0 (а не из пропса), а в интервале 
он уже this.props.deviation – https://inlnk.ru/ZZonJy" =>
    Вы, безусловно правы. Значение свойства "deviation" (0 то есть) я решил задать для того, чтобы динамически указать тип значения этого свойства - 
    number то есть. Если бы я писал бы на TypeScript, я бы использовал статическую привязку типа. Исправленно.

IV -- "[CRUD] ID, по хорошему, должен создавать и возвращать бекенд https://inlnk.ru/Rj6L2A" =>
    полностью Вас поддерживаю, но в ТЗ про это не было сказано, поэтому решил создать ID на frontend-части.

V -- "Задания лучше сдавать в отдельных репозиториях, как указанно в ДЗ" =>
    Вы правы, так было бы лучше, но мне показалось, что три красивые папочки с тремя разными решениями заданий тоже буду красиво смотреться и не 
    будут "раздувать" мой GitHub))).

VI -- "В названии директории опечатка task_namber_three. Слово number" и "[Clock] Опечатка в слове minuts. Слово minutes" => 
    Ох, действительно, мой английский язык меня подвел... Поправил названия.

VII -- "[Clock] Почему-то компонент Clock у вас в отдельной директории со стилями, а компонент AddBlock нет. И еще файл со стилями отличается названием" =>
    Компонент "Clock" вынес в отдельную директорию потому, что посчитал это как отдельную абстрактную вещь, а "AddBlock" это просто форма (еще и, к
    тому же, название CSS не соответствует названию компонента). Исправленно.

VIII -- "[CRUD] Название файла серверного кода не соответствует настройкам в package.json" =>
    Были некоторые проблемы при установке зависимостей и запуске сервера, поэтому получилось вот так.

IX -- "[CRUD] В идеале MainComponent сделать классовым т.к. по идее, вы еще не знаете про useEffect() на момент ДЗ" =>
    Вы правы, но у меня был некоторый опыт в разработке на React, поэтому про классовый компонент я даже и не подумал.